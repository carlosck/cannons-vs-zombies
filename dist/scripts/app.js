// Generated by CoffeeScript 1.7.1
var App;

App = {
  init: function() {
    this.$stage = null;
    this.$world = null;
    this.game = null;
    this.$ball_1 = null;
    this.$ball_2 = null;
    this.$ball_3 = null;
    this.$ball_4 = null;
    this.$ball_5 = null;
    this.$cannon_1 = null;
    this.$cannon_2 = null;
    this.$cannon_3 = null;
    this.$cannon_4 = null;
    this.$cannon_5 = null;
    this.humans = new Array();
    this.projectiles = new Array();
    this.grounds = new Array();
    this.div_count = 0;
    this.projectile_count = 0;
    this.enemy_thread = null;
    return this.bind();
  },
  bind: function() {
    App.zombie.prototype = new App.human;
    this.$stage = this.by_id("stage");
    this.$world = this.by_id("world");
    this.$ball_1 = this.by_id("ball_1");
    this.$ball_2 = this.by_id("ball_2");
    this.$ball_3 = this.by_id("ball_3");
    this.$ball_4 = this.by_id("ball_4");
    this.$ball_5 = this.by_id("ball_5");
    this.$cannon_1 = this.by_id("cannon_1");
    this.$cannon_2 = this.by_id("cannon_2");
    this.$cannon_3 = this.by_id("cannon_3");
    this.$cannon_4 = this.by_id("cannon_4");
    this.$cannon_5 = this.by_id("cannon_5");
    this.set_on(document, "keydown", App.key_down);
    this.set_on(document, "keyup", App.key_up);
    this.set_on(App.$ball_1, "dragstart", App.drag_start);
    this.set_on(App.$ball_2, "dragstart", App.drag_start);
    this.set_on(App.$ball_3, "dragstart", App.drag_start);
    this.set_on(App.$ball_4, "dragstart", App.drag_start);
    this.set_on(App.$ball_5, "dragstart", App.drag_start);
    this.set_on(App.$cannon_1, "drop", App.drop);
    this.set_on(App.$cannon_2, "drop", App.drop);
    this.set_on(App.$cannon_3, "drop", App.drop);
    this.set_on(App.$cannon_4, "drop", App.drop);
    this.set_on(App.$cannon_5, "drop", App.drop);
    this.set_on(App.$cannon_1, "dragover", App.drag_over);
    this.set_on(App.$cannon_2, "dragover", App.drag_over);
    this.set_on(App.$cannon_3, "dragover", App.drag_over);
    this.set_on(App.$cannon_4, "dragover", App.drag_over);
    this.set_on(App.$cannon_5, "dragover", App.drag_over);
    this.set_on(App.$cannon_1, "dragleave", App.drag_leave);
    this.set_on(App.$cannon_2, "dragleave", App.drag_leave);
    this.set_on(App.$cannon_3, "dragleave", App.drag_leave);
    this.set_on(App.$cannon_4, "dragleave", App.drag_leave);
    this.set_on(App.$cannon_5, "dragleave", App.drag_leave);
    return this.start();
  },
  key_down: function(event) {
    console.log(event.which);
    switch (event.which) {
      case 32:
        return App.hero.jump(true);
      case 37:
        return App.hero.set_walk_left(true);
      case 39:
        return App.hero.set_walk_right(true);
      case 83:
        console.log("shoot");
        return App.hero.shoot(true);
    }
  },
  key_up: function(event) {
    console.log(event.which);
    switch (event.which) {
      case 37:
        return App.hero.set_walk_left(false);
      case 39:
        return App.hero.set_walk_right(false);
    }
  },
  drag_start: function(event) {
    return event.dataTransfer.setData('ballid', event.target.id);
  },
  drop: function(event) {
    var ball_id, cannon_id;
    ball_id = event.dataTransfer.getData("ballid");
    cannon_id = event.target;
    console.log("ball->" + ball_id);
    console.log("cannon->" + cannon_id.id);
    return App.shoot(cannon_id.id.replace("cannon_", ""));
  },
  drag_over: function(event) {
    event.preventDefault();
    event.stopPropagation();
    if (!App.has_class(event.target, "selected")) {
      return App.add_class(event.target, "selected");
    }
  },
  drag_leave: function(event) {
    event.preventDefault();
    return App.remove_class(event.target, "selected");
  },
  start: function() {
    console.log("start");
    App.make_an_enemy();
    this.enemy_thread = setInterval(function() {
      return App.make_an_enemy();
    }, 1000);
    return this.game = setInterval(function() {
      return App.main_loop();
    }, 100);
  },
  main_loop: function() {
    var human, p, projectile, u, _i, _j, _len, _len1, _ref, _ref1;
    _ref = App.humans;
    for (u = _i = 0, _len = _ref.length; _i < _len; u = ++_i) {
      human = _ref[u];
      human.update();
      App.css(human.body, {
        "left": human.left + "px"
      });
      App.css(human.body, {
        "top": human.top + "px"
      });
    }
    _ref1 = App.projectiles;
    for (p = _j = 0, _len1 = _ref1.length; _j < _len1; p = ++_j) {
      projectile = _ref1[p];
      projectile.update();
      if (projectile.left > 800) {
        App.projectiles.is_fired = false;
      } else {
        App.css(projectile.body, {
          "left": projectile.left + "px"
        });
        App.css(projectile.body, {
          "top": projectile.top + "px"
        });
      }
    }
    return App.check_collitions();
  },
  check_collitions: function() {},
  make_an_enemy: function() {
    var div, random, zombie;
    random = Math.floor(Math.random() * 5);
    div = document.createElement('div');
    div.className = "human";
    div.id = "enemy" + App.div_count;
    div.innerHTML = "<div class='healt_bar'></div>";
    this.$world.appendChild(div);
    zombie = new App.zombie(100, div, 1, random);
    App.div_count++;
    zombie.start_walking();
    return this.humans.push(zombie);
  },
  game_over: function() {
    return alert("game_over");
  },
  shoot: function(line) {
    var cannon, div;
    div = document.createElement('div');
    div.className = "projectile";
    div.id = "projectile" + App.projectile_count;
    div.innerHTML = "<div class='ball'></div>";
    this.$world.appendChild(div);
    cannon = new App.projectile(50, div, 10, line - 1);
    App.projectile_count++;
    cannon.shoot();
    return this.projectiles.push(cannon);
  }
};

document.addEventListener('DOMContentLoaded', function() {
  return App.init();
});
